{
  "address": "0x9A90f394b6de7E462669413fEf6D3e644B7Dd0E5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "communityId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "ipfsMetadata",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakingRequirement",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "CommunityCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "communityId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberJoinedCommunity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "communityId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "OfferAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "communityId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "communityId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "metadata",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "reputationRequirement",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakingRequirement",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "offerStatus",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct PeerLocal.Offer",
          "name": "newOffer",
          "type": "tuple"
        }
      ],
      "name": "OfferCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "erc20",
          "type": "address"
        }
      ],
      "name": "PeerLocalInitalized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "communityId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "acceptOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "communities",
      "outputs": [
        {
          "internalType": "string",
          "name": "ipfsMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "stakingRequirement",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "communityMembers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ipfsMetadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "stakingRequirement",
          "type": "uint256"
        }
      ],
      "name": "createCommunity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "communityId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "reputationRequirement",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingRequirement",
          "type": "uint256"
        }
      ],
      "name": "createOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "communityId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "joinCommunity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "offerStatus",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "offers",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "communityId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "reputationRequirement",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakingRequirement",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "offerStatus",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "reputation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3b67c98e39d21301e529691aaeef39a77d7b4a38af045270470889bb18dcde1d",
  "receipt": {
    "to": null,
    "from": "0x3683300D0E62Fe4E39c870a55aF9A1C6cCc19123",
    "contractAddress": "0x9A90f394b6de7E462669413fEf6D3e644B7Dd0E5",
    "transactionIndex": 3,
    "gasUsed": "1436584",
    "logsBloom": "0x
    "blockHash": "0xb5918dcd58956284d9d2d29d41cb35adc1c709956a309700da735601c2c569d7",
    "transactionHash": "0x3b67c98e39d21301e529691aaeef39a77d7b4a38af045270470889bb18dcde1d",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 10447246,
        "transactionHash": "0x3b67c98e39d21301e529691aaeef39a77d7b4a38af045270470889bb18dcde1d",
        "address": "0x9A90f394b6de7E462669413fEf6D3e644B7Dd0E5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003683300d0e62fe4e39c870a55af9a1c6ccc19123"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xb5918dcd58956284d9d2d29d41cb35adc1c709956a309700da735601c2c569d7"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 10447246,
        "transactionHash": "0x3b67c98e39d21301e529691aaeef39a77d7b4a38af045270470889bb18dcde1d",
        "address": "0x9A90f394b6de7E462669413fEf6D3e644B7Dd0E5",
        "topics": [
          "0xcb880ce60e28c1cc24531731b8cd4417425fb64a20c0a4a43496376f1b7c606c",
          "0x000000000000000000000000bb28804f238935ec0876153eea7677549ed1f6dd"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xb5918dcd58956284d9d2d29d41cb35adc1c709956a309700da735601c2c569d7"
      }
    ],
    "blockNumber": 10447246,
    "cumulativeGasUsed": "1681588",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbb28804F238935eC0876153EEa7677549ed1F6dd"
  ],
  "numDeployments": 1,
  "solcInputHash": "2e5f4c1d4fc0bc2431eab0b41345268a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"communityId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfsMetadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingRequirement\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CommunityCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"communityId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberJoinedCommunity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"communityId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"OfferAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"communityId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"communityId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reputationRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingRequirement\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"offerStatus\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct PeerLocal.Offer\",\"name\":\"newOffer\",\"type\":\"tuple\"}],\"name\":\"OfferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"PeerLocalInitalized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"communityId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"communities\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"ipfsMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stakingRequirement\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"communityMembers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ipfsMetadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stakingRequirement\",\"type\":\"uint256\"}],\"name\":\"createCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"communityId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reputationRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingRequirement\",\"type\":\"uint256\"}],\"name\":\"createOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"communityId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"joinCommunity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offerStatus\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"communityId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reputationRequirement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingRequirement\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"offerStatus\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reputation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PeerLocal.sol\":\"PeerLocal\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/PeerLocal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract PeerLocal is Ownable {\\n\\n    bytes32 MESSAGE_TO_BE_SIGNED_BY_COMMUNIT_OWNER = \\\"I am the owner of this community\\\";\\n\\n    struct Community {\\n        string ipfsMetadata;\\n        uint256 stakingRequirement;\\n        address owner;\\n    }\\n\\n    struct Offer {\\n        address owner;\\n        uint256 communityId;\\n        string metadata;\\n        uint256 reputationRequirement;\\n        uint256 stakingRequirement;\\n        string offerStatus;\\n    }\\n\\n    event CommunityCreated(uint256 indexed communityId, string ipfsMetadata, uint256 stakingRequirement, address indexed owner);\\n    event MemberJoinedCommunity(uint256 indexed communityId, address indexed member);\\n    event OfferCreated(uint256 indexed communityId, uint256 offerId, Offer newOffer);\\n    event OfferAccepted(uint256 indexed communityId, uint256 indexed offerId, address indexed member);\\n    event PeerLocalInitalized(address indexed erc20);\\n\\n\\n\\n    IERC20 public token; // GHO\\n    mapping(uint256 => Community) public communities;\\n    uint256 communityCounter = 0;\\n    uint256 offerCounter = 0;\\n    // communityId => offerId => Offer\\n    mapping(uint256 => mapping(uint256 => Offer)) public offers;\\n\\n    mapping(uint256 => address[]) public communityMembers;\\n    mapping(address => uint256) public reputation;\\n\\n    mapping(uint256 => string) public offerStatus;\\n\\n\\n    constructor(IERC20 _token) {\\n        token = _token;\\n        emit PeerLocalInitalized(address(_token));\\n    }\\n\\n    function createCommunity(string memory ipfsMetadata, uint256 stakingRequirement) public {\\n        communities[communityCounter] = Community({ipfsMetadata: ipfsMetadata, stakingRequirement: stakingRequirement, owner: msg.sender});\\n        communityCounter++;\\n        emit CommunityCreated(communityCounter - 1, ipfsMetadata, stakingRequirement, msg.sender);\\n    }\\n\\n    function joinCommunity(uint256 communityId, bytes memory signature) public {\\n        // signature has to be from the owner of the community\\n        require(_recoverSigner(signature) == communities[communityId].owner, \\\"Invalid signature\\\");\\n        require(token.balanceOf(msg.sender) >= communities[communityId].stakingRequirement, \\\"Insufficient balance to join community\\\");\\n        // transfer from msg.sender to this contract\\n        token.transferFrom(msg.sender, address(this), communities[communityId].stakingRequirement);\\n        // add msg.sender to communityMembers\\n        communityMembers[communityId].push(msg.sender);\\n        // emit event\\n        emit MemberJoinedCommunity(communityId, msg.sender);\\n    }\\n\\n    function createOffer(uint256 communityId, string memory metadata, uint256 reputationRequirement, uint256 stakingRequirement) public {\\n        require(reputation[msg.sender] >= reputationRequirement, \\\"Insufficient reputation to create offer\\\");\\n        \\n        //We add one to the offerCounter\\n        offerCounter += 1;\\n\\n        Offer memory newOffer = Offer(msg.sender, communityId, metadata, reputationRequirement, stakingRequirement, \\\"created\\\");\\n\\n        offers[communityId][offerCounter] = newOffer;\\n        // set the status of the offer to 1, created, not accept\\n        emit OfferCreated(communityId, offerCounter, newOffer);\\n    }\\n\\n    function acceptOffer(uint256 communityId, uint256 offerId) public {\\n        require(token.balanceOf(msg.sender) >= offers[communityId][offerId].stakingRequirement, \\\"Insufficient balance to accept offer\\\");\\n        require(reputation[msg.sender] >= offers[communityId][offerId].reputationRequirement, \\\"Insufficient reputation to accept offer\\\"); \\n        // Transfer staked tokens\\n        token.transferFrom(msg.sender, address(this), offers[communityId][offerId].stakingRequirement);\\n        // Transfer staked tokens to offer owner\\n        token.transfer(offers[communityId][offerId].owner, offers[communityId][offerId].stakingRequirement);\\n        // emit event\\n        emit OfferAccepted(communityId, offerId, msg.sender);\\n    }\\n\\n    function _recoverSigner(\\n        bytes memory signature\\n    ) private view returns (address) {\\n        return ECDSA.recover(ECDSA.toEthSignedMessageHash(MESSAGE_TO_BE_SIGNED_BY_COMMUNIT_OWNER), signature);\\n    }\\n\\n    //function endOffer(uint256 communityId, uint256 offerId) public {}\\n}\\n\",\"keccak256\":\"0x9195ffba31e860f678b58483e72fc1ade5887a7b5f4349daecd7675c8dc7a4d6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040527f4920616d20746865206f776e6572206f66207468697320636f6d6d756e6974796001556000600455600060055534801561003e57600080fd5b506040516118ef3803806118ef83398101604081905261005d91610103565b610066336100b3565b600280546001600160a01b0319166001600160a01b0383169081179091556040517fcb880ce60e28c1cc24531731b8cd4417425fb64a20c0a4a43496376f1b7c606c90600090a250610133565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561011557600080fd5b81516001600160a01b038116811461012c57600080fd5b9392505050565b6117ad806101426000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c806381257bd51161008c578063d843b2c711610066578063d843b2c7146101d2578063e590b56a146101f2578063f2fde38b14610214578063fc0c546a1461022757600080fd5b806381257bd5146101805780638da5cb5b14610193578063b9f79451146101a457600080fd5b806361c6a009116100bd57806361c6a00914610152578063715018a6146101655780637ee980091461016d57600080fd5b80631173648e146100e45780634d03a9a5146100f957806354d00c0414610127575b600080fd5b6100f76100f2366004611372565b61023a565b005b61010c6101073660046113b7565b61031c565b60405161011e96959493929190611426565b60405180910390f35b61013a6101353660046113b7565b610476565b6040516001600160a01b03909116815260200161011e565b6100f7610160366004611479565b6104ae565b6100f7610752565b6100f761017b3660046114d4565b610766565b6100f761018e3660046113b7565b61093a565b6000546001600160a01b031661013a565b6101c46101b236600461152b565b60086020526000908152604090205481565b60405190815260200161011e565b6101e56101e0366004611554565b610c90565b60405161011e919061156d565b610205610200366004611554565b610d2a565b60405161011e93929190611580565b6100f761022236600461152b565b610dde565b60025461013a906001600160a01b031681565b60408051606081018252838152602080820184905233828401526004546000908152600382529290922081518051929391926102799284920190611226565b50602082015160018201556040909101516002909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055600480549060006102c9836115c8565b909155505060045433906102df90600190611601565b7ffbfec78961027d8919f53e6283bb0e6c6d4bc310e87697187bc641f241ea155f8484604051610310929190611618565b60405180910390a35050565b60066020908152600092835260408084209091529082529020805460018201546002830180546001600160a01b039093169391926103599061163a565b80601f01602080910402602001604051908101604052809291908181526020018280546103859061163a565b80156103d25780601f106103a7576101008083540402835291602001916103d2565b820191906000526020600020905b8154815290600101906020018083116103b557829003601f168201915b5050505050908060030154908060040154908060050180546103f39061163a565b80601f016020809104026020016040519081016040528092919081815260200182805461041f9061163a565b801561046c5780601f106104415761010080835404028352916020019161046c565b820191906000526020600020905b81548152906001019060200180831161044f57829003601f168201915b5050505050905086565b6007602052816000526040600020818154811061049257600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000828152600360205260409020600201546001600160a01b03166104d282610e6e565b6001600160a01b03161461052d5760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064015b60405180910390fd5b600082815260036020526040908190206001015460025491517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015290916001600160a01b0316906370a0823190602401602060405180830381865afa1580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c59190611675565b10156106395760405162461bcd60e51b815260206004820152602660248201527f496e73756666696369656e742062616c616e636520746f206a6f696e20636f6d60448201527f6d756e69747900000000000000000000000000000000000000000000000000006064820152608401610524565b600254600083815260036020526040908190206001015490517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101919091526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156106bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e1919061168e565b5060008281526007602090815260408083208054600181018255908452918320909101805473ffffffffffffffffffffffffffffffffffffffff1916339081179091559051909184917f17671f80466a04ae9525dbdb041b26d88ef566a69866f8bd126b07df7c23ffb29190a35050565b61075a610ed8565b6107646000610f32565b565b336000908152600860205260409020548211156107eb5760405162461bcd60e51b815260206004820152602760248201527f496e73756666696369656e742072657075746174696f6e20746f20637265617460448201527f65206f66666572000000000000000000000000000000000000000000000000006064820152608401610524565b6001600560008282546107fe91906116b0565b90915550506040805160c0810182523381526020808201878152828401878152606084018790526080840186905284518086018652600781527f63726561746564000000000000000000000000000000000000000000000000008185015260a085015260008981526006845285812060055482528452949094208351815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390911617815590516001820155925180519293849390926108c3926002850192910190611226565b50606082015160038201556080820151600482015560a082015180516108f3916005840191602090910190611226565b50905050847f7fbda346a441a14329848f3b8275cceef226a832a7bd105f991a582389e50d146005548360405161092b9291906116c8565b60405180910390a25050505050565b60008281526006602090815260408083208484529091529081902060049081015460025492517f70a082310000000000000000000000000000000000000000000000000000000081523392810192909252916001600160a01b0316906370a0823190602401602060405180830381865afa1580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e09190611675565b1015610a535760405162461bcd60e51b8152602060048201526024808201527f496e73756666696369656e742062616c616e636520746f20616363657074206f60448201527f66666572000000000000000000000000000000000000000000000000000000006064820152608401610524565b60008281526006602090815260408083208484528252808320600301543384526008909252909120541015610af05760405162461bcd60e51b815260206004820152602760248201527f496e73756666696369656e742072657075746174696f6e20746f20616363657060448201527f74206f66666572000000000000000000000000000000000000000000000000006064820152608401610524565b60025460008381526006602090815260408083208584529091529081902060049081015491517f23b872dd000000000000000000000000000000000000000000000000000000008152339181019190915230602482015260448101919091526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba7919061168e565b50600254600083815260066020908152604080832085845290915290819020805460049182015492517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0391821692810192909252602482019290925291169063a9059cbb906044016020604051808303816000875af1158015610c38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5c919061168e565b506040513390829084907fcb229072cbcd1d5410a56504f86a872c0eac1578c7eb4463ec190b52d3b669e290600090a45050565b60096020526000908152604090208054610ca99061163a565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd59061163a565b8015610d225780601f10610cf757610100808354040283529160200191610d22565b820191906000526020600020905b815481529060010190602001808311610d0557829003601f168201915b505050505081565b600360205260009081526040902080548190610d459061163a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d719061163a565b8015610dbe5780601f10610d9357610100808354040283529160200191610dbe565b820191906000526020600020905b815481529060010190602001808311610da157829003601f168201915b5050505060018301546002909301549192916001600160a01b0316905083565b610de6610ed8565b6001600160a01b038116610e625760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610524565b610e6b81610f32565b50565b6000610ed2610ecc6001546040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b83610f8f565b92915050565b6000546001600160a01b031633146107645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610524565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000610f9e8585610fb3565b91509150610fab81610ff9565b509392505050565b600080825160411415610fea5760208301516040840151606085015160001a610fde87828585611162565b94509450505050610ff2565b506000905060025b9250929050565b600081600481111561100d5761100d611761565b14156110165750565b600181600481111561102a5761102a611761565b14156110785760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610524565b600281600481111561108c5761108c611761565b14156110da5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610524565b60038160048111156110ee576110ee611761565b1415610e6b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610524565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611199575060009050600361121d565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156111ed573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166112165760006001925092505061121d565b9150600090505b94509492505050565b8280546112329061163a565b90600052602060002090601f016020900481019282611254576000855561129a565b82601f1061126d57805160ff191683800117855561129a565b8280016001018555821561129a579182015b8281111561129a57825182559160200191906001019061127f565b506112a69291506112aa565b5090565b5b808211156112a657600081556001016112ab565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156112f0576112f06112bf565b604051601f8501601f19908116603f01168101908282118183101715611318576113186112bf565b8160405280935085815286868601111561133157600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261135c57600080fd5b61136b838335602085016112d5565b9392505050565b6000806040838503121561138557600080fd5b823567ffffffffffffffff81111561139c57600080fd5b6113a88582860161134b565b95602094909401359450505050565b600080604083850312156113ca57600080fd5b50508035926020909101359150565b6000815180845260005b818110156113ff576020818501810151868301820152016113e3565b81811115611411576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038716815285602082015260c06040820152600061144e60c08301876113d9565b85606084015284608084015282810360a084015261146c81856113d9565b9998505050505050505050565b6000806040838503121561148c57600080fd5b82359150602083013567ffffffffffffffff8111156114aa57600080fd5b8301601f810185136114bb57600080fd5b6114ca858235602084016112d5565b9150509250929050565b600080600080608085870312156114ea57600080fd5b84359350602085013567ffffffffffffffff81111561150857600080fd5b6115148782880161134b565b949794965050505060408301359260600135919050565b60006020828403121561153d57600080fd5b81356001600160a01b038116811461136b57600080fd5b60006020828403121561156657600080fd5b5035919050565b60208152600061136b60208301846113d9565b60608152600061159360608301866113d9565b90508360208301526001600160a01b0383166040830152949350505050565b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156115fa576115fa6115b2565b5060010190565b600082821015611613576116136115b2565b500390565b60408152600061162b60408301856113d9565b90508260208301529392505050565b600181811c9082168061164e57607f821691505b6020821081141561166f57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561168757600080fd5b5051919050565b6000602082840312156116a057600080fd5b8151801515811461136b57600080fd5b600082198211156116c3576116c36115b2565b500190565b828152604060208201526001600160a01b038251166040820152602082015160608201526000604083015160c060808401526117086101008401826113d9565b9050606084015160a0840152608084015160c084015260a08401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08483030160e085015261175782826113d9565b9695505050505050565b634e487b7160e01b600052602160045260246000fdfea26469706673582212209e90b4dce631cc0b2b8fa90a10a2748ae24476de9126a799d056a8d105b3661364736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c806381257bd51161008c578063d843b2c711610066578063d843b2c7146101d2578063e590b56a146101f2578063f2fde38b14610214578063fc0c546a1461022757600080fd5b806381257bd5146101805780638da5cb5b14610193578063b9f79451146101a457600080fd5b806361c6a009116100bd57806361c6a00914610152578063715018a6146101655780637ee980091461016d57600080fd5b80631173648e146100e45780634d03a9a5146100f957806354d00c0414610127575b600080fd5b6100f76100f2366004611372565b61023a565b005b61010c6101073660046113b7565b61031c565b60405161011e96959493929190611426565b60405180910390f35b61013a6101353660046113b7565b610476565b6040516001600160a01b03909116815260200161011e565b6100f7610160366004611479565b6104ae565b6100f7610752565b6100f761017b3660046114d4565b610766565b6100f761018e3660046113b7565b61093a565b6000546001600160a01b031661013a565b6101c46101b236600461152b565b60086020526000908152604090205481565b60405190815260200161011e565b6101e56101e0366004611554565b610c90565b60405161011e919061156d565b610205610200366004611554565b610d2a565b60405161011e93929190611580565b6100f761022236600461152b565b610dde565b60025461013a906001600160a01b031681565b60408051606081018252838152602080820184905233828401526004546000908152600382529290922081518051929391926102799284920190611226565b50602082015160018201556040909101516002909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055600480549060006102c9836115c8565b909155505060045433906102df90600190611601565b7ffbfec78961027d8919f53e6283bb0e6c6d4bc310e87697187bc641f241ea155f8484604051610310929190611618565b60405180910390a35050565b60066020908152600092835260408084209091529082529020805460018201546002830180546001600160a01b039093169391926103599061163a565b80601f01602080910402602001604051908101604052809291908181526020018280546103859061163a565b80156103d25780601f106103a7576101008083540402835291602001916103d2565b820191906000526020600020905b8154815290600101906020018083116103b557829003601f168201915b5050505050908060030154908060040154908060050180546103f39061163a565b80601f016020809104026020016040519081016040528092919081815260200182805461041f9061163a565b801561046c5780601f106104415761010080835404028352916020019161046c565b820191906000526020600020905b81548152906001019060200180831161044f57829003601f168201915b5050505050905086565b6007602052816000526040600020818154811061049257600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000828152600360205260409020600201546001600160a01b03166104d282610e6e565b6001600160a01b03161461052d5760405162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064015b60405180910390fd5b600082815260036020526040908190206001015460025491517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015290916001600160a01b0316906370a0823190602401602060405180830381865afa1580156105a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c59190611675565b10156106395760405162461bcd60e51b815260206004820152602660248201527f496e73756666696369656e742062616c616e636520746f206a6f696e20636f6d60448201527f6d756e69747900000000000000000000000000000000000000000000000000006064820152608401610524565b600254600083815260036020526040908190206001015490517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101919091526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156106bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e1919061168e565b5060008281526007602090815260408083208054600181018255908452918320909101805473ffffffffffffffffffffffffffffffffffffffff1916339081179091559051909184917f17671f80466a04ae9525dbdb041b26d88ef566a69866f8bd126b07df7c23ffb29190a35050565b61075a610ed8565b6107646000610f32565b565b336000908152600860205260409020548211156107eb5760405162461bcd60e51b815260206004820152602760248201527f496e73756666696369656e742072657075746174696f6e20746f20637265617460448201527f65206f66666572000000000000000000000000000000000000000000000000006064820152608401610524565b6001600560008282546107fe91906116b0565b90915550506040805160c0810182523381526020808201878152828401878152606084018790526080840186905284518086018652600781527f63726561746564000000000000000000000000000000000000000000000000008185015260a085015260008981526006845285812060055482528452949094208351815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390911617815590516001820155925180519293849390926108c3926002850192910190611226565b50606082015160038201556080820151600482015560a082015180516108f3916005840191602090910190611226565b50905050847f7fbda346a441a14329848f3b8275cceef226a832a7bd105f991a582389e50d146005548360405161092b9291906116c8565b60405180910390a25050505050565b60008281526006602090815260408083208484529091529081902060049081015460025492517f70a082310000000000000000000000000000000000000000000000000000000081523392810192909252916001600160a01b0316906370a0823190602401602060405180830381865afa1580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e09190611675565b1015610a535760405162461bcd60e51b8152602060048201526024808201527f496e73756666696369656e742062616c616e636520746f20616363657074206f60448201527f66666572000000000000000000000000000000000000000000000000000000006064820152608401610524565b60008281526006602090815260408083208484528252808320600301543384526008909252909120541015610af05760405162461bcd60e51b815260206004820152602760248201527f496e73756666696369656e742072657075746174696f6e20746f20616363657060448201527f74206f66666572000000000000000000000000000000000000000000000000006064820152608401610524565b60025460008381526006602090815260408083208584529091529081902060049081015491517f23b872dd000000000000000000000000000000000000000000000000000000008152339181019190915230602482015260448101919091526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba7919061168e565b50600254600083815260066020908152604080832085845290915290819020805460049182015492517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0391821692810192909252602482019290925291169063a9059cbb906044016020604051808303816000875af1158015610c38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5c919061168e565b506040513390829084907fcb229072cbcd1d5410a56504f86a872c0eac1578c7eb4463ec190b52d3b669e290600090a45050565b60096020526000908152604090208054610ca99061163a565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd59061163a565b8015610d225780601f10610cf757610100808354040283529160200191610d22565b820191906000526020600020905b815481529060010190602001808311610d0557829003601f168201915b505050505081565b600360205260009081526040902080548190610d459061163a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d719061163a565b8015610dbe5780601f10610d9357610100808354040283529160200191610dbe565b820191906000526020600020905b815481529060010190602001808311610da157829003601f168201915b5050505060018301546002909301549192916001600160a01b0316905083565b610de6610ed8565b6001600160a01b038116610e625760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610524565b610e6b81610f32565b50565b6000610ed2610ecc6001546040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b83610f8f565b92915050565b6000546001600160a01b031633146107645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610524565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000610f9e8585610fb3565b91509150610fab81610ff9565b509392505050565b600080825160411415610fea5760208301516040840151606085015160001a610fde87828585611162565b94509450505050610ff2565b506000905060025b9250929050565b600081600481111561100d5761100d611761565b14156110165750565b600181600481111561102a5761102a611761565b14156110785760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610524565b600281600481111561108c5761108c611761565b14156110da5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610524565b60038160048111156110ee576110ee611761565b1415610e6b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610524565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611199575060009050600361121d565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156111ed573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166112165760006001925092505061121d565b9150600090505b94509492505050565b8280546112329061163a565b90600052602060002090601f016020900481019282611254576000855561129a565b82601f1061126d57805160ff191683800117855561129a565b8280016001018555821561129a579182015b8281111561129a57825182559160200191906001019061127f565b506112a69291506112aa565b5090565b5b808211156112a657600081556001016112ab565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156112f0576112f06112bf565b604051601f8501601f19908116603f01168101908282118183101715611318576113186112bf565b8160405280935085815286868601111561133157600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261135c57600080fd5b61136b838335602085016112d5565b9392505050565b6000806040838503121561138557600080fd5b823567ffffffffffffffff81111561139c57600080fd5b6113a88582860161134b565b95602094909401359450505050565b600080604083850312156113ca57600080fd5b50508035926020909101359150565b6000815180845260005b818110156113ff576020818501810151868301820152016113e3565b81811115611411576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038716815285602082015260c06040820152600061144e60c08301876113d9565b85606084015284608084015282810360a084015261146c81856113d9565b9998505050505050505050565b6000806040838503121561148c57600080fd5b82359150602083013567ffffffffffffffff8111156114aa57600080fd5b8301601f810185136114bb57600080fd5b6114ca858235602084016112d5565b9150509250929050565b600080600080608085870312156114ea57600080fd5b84359350602085013567ffffffffffffffff81111561150857600080fd5b6115148782880161134b565b949794965050505060408301359260600135919050565b60006020828403121561153d57600080fd5b81356001600160a01b038116811461136b57600080fd5b60006020828403121561156657600080fd5b5035919050565b60208152600061136b60208301846113d9565b60608152600061159360608301866113d9565b90508360208301526001600160a01b0383166040830152949350505050565b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156115fa576115fa6115b2565b5060010190565b600082821015611613576116136115b2565b500390565b60408152600061162b60408301856113d9565b90508260208301529392505050565b600181811c9082168061164e57607f821691505b6020821081141561166f57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561168757600080fd5b5051919050565b6000602082840312156116a057600080fd5b8151801515811461136b57600080fd5b600082198211156116c3576116c36115b2565b500190565b828152604060208201526001600160a01b038251166040820152602082015160608201526000604083015160c060808401526117086101008401826113d9565b9050606084015160a0840152608084015160c084015260a08401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08483030160e085015261175782826113d9565b9695505050505050565b634e487b7160e01b600052602160045260246000fdfea26469706673582212209e90b4dce631cc0b2b8fa90a10a2748ae24476de9126a799d056a8d105b3661364736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PeerLocal.sol:PeerLocal",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2235,
        "contract": "contracts/PeerLocal.sol:PeerLocal",
        "label": "MESSAGE_TO_BE_SIGNED_BY_COMMUNIT_OWNER",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 2295,
        "contract": "contracts/PeerLocal.sol:PeerLocal",
        "label": "token",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)777"
      },
      {
        "astId": 2300,
        "contract": "contracts/PeerLocal.sol:PeerLocal",
        "label": "communities",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Community)2242_storage)"
      },
      {
        "astId": 2303,
        "contract": "contracts/PeerLocal.sol:PeerLocal",
        "label": "communityCounter",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2306,
        "contract": "contracts/PeerLocal.sol:PeerLocal",
        "label": "offerCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2313,
        "contract": "contracts/PeerLocal.sol:PeerLocal",
        "label": "offers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Offer)2255_storage))"
      },
      {
        "astId": 2318,
        "contract": "contracts/PeerLocal.sol:PeerLocal",
        "label": "communityMembers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 2322,
        "contract": "contracts/PeerLocal.sol:PeerLocal",
        "label": "reputation",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2326,
        "contract": "contracts/PeerLocal.sol:PeerLocal",
        "label": "offerStatus",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)777": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Offer)2255_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct PeerLocal.Offer))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Offer)2255_storage)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Community)2242_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PeerLocal.Community)",
        "numberOfBytes": "32",
        "value": "t_struct(Community)2242_storage"
      },
      "t_mapping(t_uint256,t_struct(Offer)2255_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PeerLocal.Offer)",
        "numberOfBytes": "32",
        "value": "t_struct(Offer)2255_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Community)2242_storage": {
        "encoding": "inplace",
        "label": "struct PeerLocal.Community",
        "members": [
          {
            "astId": 2237,
            "contract": "contracts/PeerLocal.sol:PeerLocal",
            "label": "ipfsMetadata",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2239,
            "contract": "contracts/PeerLocal.sol:PeerLocal",
            "label": "stakingRequirement",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2241,
            "contract": "contracts/PeerLocal.sol:PeerLocal",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Offer)2255_storage": {
        "encoding": "inplace",
        "label": "struct PeerLocal.Offer",
        "members": [
          {
            "astId": 2244,
            "contract": "contracts/PeerLocal.sol:PeerLocal",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2246,
            "contract": "contracts/PeerLocal.sol:PeerLocal",
            "label": "communityId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2248,
            "contract": "contracts/PeerLocal.sol:PeerLocal",
            "label": "metadata",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2250,
            "contract": "contracts/PeerLocal.sol:PeerLocal",
            "label": "reputationRequirement",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2252,
            "contract": "contracts/PeerLocal.sol:PeerLocal",
            "label": "stakingRequirement",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2254,
            "contract": "contracts/PeerLocal.sol:PeerLocal",
            "label": "offerStatus",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}